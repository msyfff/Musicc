/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.4/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.9.10"

    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    google()
    // ini klo kita mau nambah repositories secara manual
//    maven {
//        url = uri("nama website")
//    }
}

dependencies {
    // untuk dependencies, buat main dia cmn bisa make yang implementation saja
    // sedangkan buat yang test dia bisa make keduanya
    // tempat download dependencies ada 2
    // https://search.maven.org/ dan https://mvnrepository.com/

    // Use the Kotlin JUnit 5 integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")

    // Use the JUnit 5 integration.
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.9.3")

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation("com.google.guava:guava:32.1.1-jre")

    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.1")

    implementation("com.google.code.gson:gson:2.8.6")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(19))
    }
}

application {
    // Define the main class for the application.
    mainClass.set("belajar.gradle.AppKt")
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

/** ini klo kita menambahkan properties di dalam gradle
 * klo kita mau buat ini make kita harus buat file baru dan
 * silahkan cek gradle.properties untuk lihat bentuknya
 * dan cara manggilnya nama variabel harus sama persis dan kita delegate
 * by project nanti dia otomatis nemuin tempatnya sendiri
 */

tasks.register("author") {
    val author : String by project
    val email : String by project

    doLast {
        println("$author : $email")
    }
}

// ini klo kita mau buat gradle baru
tasks.register("helloworld") {
    doFirst{
        println("Hello")
    }
    doLast{
        println("World!")
    }
}
